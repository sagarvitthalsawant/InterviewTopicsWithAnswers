Naming conventions
		Self-explanatory, easily pronouncable
		
Ordering Class Members by Scopes
		all private together then after leaving one line all float together and so on for better readablity
		
Class Members should be private (fields)
		to enforce information hiding or encapsulation in software design
		
Using Underscores in Numeric Literals
		little update from Java 7 helps us write lengthy numeric literals much more readable
		long accountBalance = 1000000000000L;		-->			1_000_000_000_000L;
		float pi = 3.141592653589F;					-->			3.141_592_653_589F;

Avoid Empty Catch Blocks
		as when the exception is caught by the empty catch block, the program fails in silence, which makes debugging harder. 
		
Using Enums or Constant Class instead of Constant Interface
		
Avoid Redundant Initialization (0-false-null)
		It’s very unnecessary to initialize member variables to the following values: 0, false and null. 
		if you know the default initialization values of member variables, you will avoid unnecessary explicit initialization.
		
Using StringBuilder or StringBuffer instead of String Concatenation
		
Avoiding Memory leaks by simple tricks
		Always release database connections when querying is complete.
		Try to use Finally block as often possible.
		Release instances stored in Static Tables.
		
Reserve memory for Java
		Some of the Java applications can be highly CPU intensive as well as they need a lot of RAM. 
			Xms = Minimum memory allocation pool
			Xmx = Maximum memory allocation pool
			XX:PermSize = Initial size that will be allocated during startup of the JVM
			XX:MaxPermSize = Maximum size that can be allocated during startup of the JVM

Use consistent indentation
Follow the DRY Principle
Limit line length of code
File and folder structure
				 nightmare to read, debug and maintain your application later. Keeping a clean folder structure will make the code a lot more readable and maintainable.
Keep the code simple










Additional Suggestions
Use Collections
Java is shipped with a few collection classes – for example, Vector, Stack, Hashtable, Array. The developers are encouraged to use collections as extensively as possible for the following reasons:

Use of collections makes the code reusable and interoperable.
Collections make the code more structured, easier to understand and maintainable.
Out of the box collection classes are well tested so the quality of code is good.
10-50-500 Rule
In big software packages, maintaining code becomes very challenging. Developers who join fresh ongoing support projects, often complain about: Monolithic Code, Spaghetti Code. There is a very simple rule to avoid that or keep the code clean and maintainable: 10-50-500.

10: No package can have more than 10 classes.
50: No method can have more than 50 lines of code.
500: No class can have more than 500 lines of code.
SOLID Class Design Principles
SOLID (http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29) is an acronym for design principles coined by Robert Martin. According to this rule:

Rule	Description
Single responsibility principle	A class should have one and only one task/responsibility. If class is performing more than one task, it leads to confusion.
Open/closed principle	The developers should focus more on extending the software entities rather than modifying them.
Liskov substitution principle	It should be possible to substitute the derived class with base class.
Interface segregation principle	It’s like Single Responsibility Principle but applicable to interfaces. Each interface should be responsible for a specific task. The developers should need to implement methods which he/she doesn’t need.
Dependency inversion principle	Depend upon Abstractions- but not on concretions. This means that each module should be separated from other using an abstract layer which binds them together.
Usage of Design Patterns
Design patterns help developers to incorporate best Software Design Principles in their software. They also provide common platform for developers across the globe. They provide standard terminology which makes developers to collaborate and easier to communicate to each other.

Document ideas
Never just start writing code. Strategize, Prepare, Document, Review and Implementation. First of all, jot down your requirements. Prepare a design document. Mention assumptions properly. Get the documents peer reviewed and take a sign off on them.

Use Equals over ==
== compares object references, it checks to see if the two operands point to the same object (not equivalent objects, the same object).On the other hand, “equals” perform actual comparison of two strings.

Avoid Floating Point Numbers
Floating point numbers should be used only if they are absolutely necessary. For example, representing Rupees and Paise using Floating Point numbers can be Problematic – BigDecimal should instead be preferred. Floating point numbers are more useful in measurements.

		